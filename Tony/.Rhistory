# Read the data
initialData <- as_tibble(read.csv('../data/shot_logs.csv', header = TRUE, na.strings = c('NA','','#NA'), stringsAsFactors = FALSE))
# Explore the data a bit
summary(initialData)
head(initialData)
tail(initialData)
# Rename and remove bad columns
#initialData <- initialData[, -c("GAME_CLOCK")]
#initialData <- initialData[, -12]
for(i in 1:nrow(initialData)){
t <- strptime(initialData$GAME_CLOCK[i], format="%M:%S")
if(t < strptime("00:25", format="%M:%S")){
initialData$SHOT_CLOCK[i] <- as.numeric(t)
}
}
# Read the data
initialData <- as_tibble(read.csv('../data/shot_logs.csv', header = TRUE, na.strings = c('NA','','#NA'), stringsAsFactors = FALSE))
setwd("~/Machine Learning/ML1000/Final Project/CSML1000-Group_10-Final-Project/Tony")
# Read the data
initialData <- as_tibble(read.csv('../data/shot_logs.csv', header = TRUE, na.strings = c('NA','','#NA'), stringsAsFactors = FALSE))
# Load libraries
library(tidyverse)
library(mclust)
library(chron)
# Read the data
initialData <- as_tibble(read.csv('../data/shot_logs.csv', header = TRUE, na.strings = c('NA','','#NA'), stringsAsFactors = FALSE))
# Explore the data a bit
summary(initialData)
head(initialData)
tail(initialData)
length(initialData)
length(initialData$GAME_CLOCK)
# Rename and remove bad columns
#initialData <- initialData[, -c("GAME_CLOCK")]
#initialData <- initialData[, -12]
for(i in 1:nrow(initialData)){
t <- strptime(initialData$GAME_CLOCK[i], format="%M:%S")
if(t < strptime("00:25", format="%M:%S")){
initialData$SHOT_CLOCK[i] <- as.numeric(t)
}
}
weird <- subset(initialData, is.na(SHOT_CLOCK))
View(weird)
View(initialData)
# Read the data
initialData <- as_tibble(read.csv('../data/shot_logs.csv', header = TRUE, na.strings = c('NA','','#NA'), stringsAsFactors = FALSE))
# Rename and remove bad columns
#initialData <- initialData[, -c("GAME_CLOCK")]
#initialData <- initialData[, -12]
for(i in 1:nrow(initialData)){
t <- as.numeric(grep("[0-9]{2}$", initialData$GAME_CLOCK[i], value = TRUE))
if(t < 25){
initialData$SHOT_CLOCK[i] <- t
}
}
# Rename and remove bad columns
#initialData <- initialData[, -c("GAME_CLOCK")]
#initialData <- initialData[, -12]
for(i in 1:nrow(initialData)){
t <- grep("[0-9]{2}$", initialData$GAME_CLOCK[i], value = TRUE)
if(t < 25){
initialData$SHOT_CLOCK[i] <- t
}
}
weird <- subset(initialData, is.na(SHOT_CLOCK))
View(initialData)
library(lubridate)
View(initialData)
t <- second(initialData$GAME_CLOCK)
t <- fast_strptime(initialData$GAME_CLOCK)
t <- fast_strptime(initialData$GAME_CLOCK, "$S")
View(t)
t <- as.data.frame(fast_strptime(initialData$GAME_CLOCK, "$S"))
View(t)
t <- as.data.frame(fast_strptime(initialData$GAME_CLOCK, "$M:$S"))
View(t)
t <- as.data.frame(fast_strptime(initialData$GAME_CLOCK, "%M:%S"))
View(t)
t <- as.data.frame(fast_strptime(initialData$GAME_CLOCK, "%S"))
View(t)
t <- as.data.frame(fast_strptime(initialData$GAME_CLOCK, "%S"))
View(t)
t <- as.data.frame(fast_strptime(initialData$GAME_CLOCK, "%M:%S"))
View(t)
t <- as.data.frame(seconds(fast_strptime(initialData$GAME_CLOCK, "%M:%S")))
View(t)
t <- as.data.frame(second(fast_strptime(initialData$GAME_CLOCK, "%M:%S")))
View(t)
s <- is.na(initialData$SHOT_CLOCK)
t <- as.vector(second(fast_strptime(initialData$GAME_CLOCK, "%M:%S")))
secondData <- initialData[if(s){initialData$SHOT_CLOCK = t}]
t <- as.vector(second(fast_strptime(initialData$GAME_CLOCK, "%M:%S")))
s <- is.na(initialData$SHOT_CLOCK)
for(i in 1:length(t)){
if(s[i] & t < 25){
initialData$SHOT_CLOCK <- t
}
}
weird <- subset(initialData, is.na(SHOT_CLOCK))
View(weird)
View(weird)
View(weird)
View(weird)
View(initialData)
# Read the data
initialData <- as_tibble(read.csv('../data/shot_logs.csv', header = TRUE, na.strings = c('NA','','#NA'), stringsAsFactors = FALSE))
t <- as.vector(second(fast_strptime(initialData$GAME_CLOCK, "%M:%S")))
s <- is.na(initialData$SHOT_CLOCK)
for(i in 1:length(t)){
if(s[i] & t < 25){
initialData$SHOT_CLOCK[i] <- t
}
}
weird <- subset(initialData, is.na(SHOT_CLOCK))
# Read the data
initialData <- as_tibble(read.csv('../data/shot_logs.csv', header = TRUE, na.strings = c('NA','','#NA'), stringsAsFactors = FALSE))
t <- as.vector(second(fast_strptime(initialData$GAME_CLOCK, "%M:%S")))
s <- is.na(initialData$SHOT_CLOCK)
for(i in 1:length(t)){
if(s[i] & t[i] < 25){
initialData$SHOT_CLOCK[i] <- t[i]
}
}
weird <- subset(initialData, is.na(SHOT_CLOCK))
View(initialData)
View(weird)
gameClock <- as.vector(second(fast_strptime(initialData$GAME_CLOCK, "%M:%S")))
shotClock <- is.na(initialData$SHOT_CLOCK)
for(i in 1:length(gameClock){
# Read the data
initialData <- as_tibble(read.csv('../data/shot_logs.csv', header = TRUE, na.strings = c('NA','','#NA'), stringsAsFactors = FALSE))
gameClock <- as.vector(second(fast_strptime(initialData$GAME_CLOCK, "%M:%S")))
shotClock <- is.na(initialData$SHOT_CLOCK)
for(i in 1:length(gameClock)){
if(shotClock[i] & gameClock[i] < 25){
initialData$SHOT_CLOCK[i] <- gameClock[i]
}
}
weirdShotClock <- subset(initialData, is.na(SHOT_CLOCK))
ggplot(initialData) + geom_bar(mapping = aes(SHOT_CLOCK, stat(count)))
write.csv(initialData, "../data/shot_logs_clean.csv")
ggplot(initialData) + geom_bar(mapping = aes(SHOT_CLOCK, stat(count)))
ggplot(initialData) + geom_bar(mapping = aes(SHOT_CLOCK < 5, stat(count)))
ggplot(initialData) + geom_point(mapping = aes(SHOT_CLOCK, stat(count)))
ggplot(initialData) + geom_point(mapping = aes(SHOT_CLOCK, stat(prop)))
write.csv(initialData, "../data/shot_logs_clean.csv")
ggplot(initialData) + geom_point(mapping = aes(SHOT_CLOCK, stat(prop)))
ggplot(initialData) + geom_bar(mapping = aes(SHOT_CLOCK, stat(prop)))
table(initialData$SHOT_CLOCK)
ggplot(initialData) + geom_bar(mapping = aes(SHOT_CLOCK, stat(count)))
ggplot(initialData) + geom_smooth(mapping = aes(SHOT_CLOCK, stat(count)))
ggplot(initialData) + geom_bar(mapping = aes(SHOT_CLOCK, stat(count))) +geom_smooth()
ggplot(initialData, mapping = aes(SHOT_CLOCK, stat(count))) + geom_bar() +geom_smooth()
ggplot(initialData, mapping = aes(SHOT_CLOCK, stat(count))) + geom_bar()
ggplot(initialData, mapping = aes(GAME_CLOCK, stat(count))) + geom_bar()
?geom_bar
ggplot(initialData, mapping = aes(SHOT_CLOCK, stat(count))) + geom_histogram()
ggplot(initialData, mapping = aes(GAME_CLOCK, stat(count))) + geom_bar()
ggplot(initialData, mapping = aes(GAME_CLOCK, stat(count))) + geom_histogram()
ggplot(initialData, mapping = aes(GAME_CLOCK, stat(count))) + geom_histogram()
ggplot(initialData, mapping = aes(GAME_CLOCK, stat=count)) + geom_histogram()
initialData$GAME_CLOCK <- as.vector(fast_strptime(initialData$GAME_CLOCK, "%M:%S"))
ggplot(initialData, mapping = aes(GAME_CLOCK, stat(count))) + geom_bar()
# Read the data
initialData <- as_tibble(read.csv('../data/shot_logs.csv', header = TRUE, na.strings = c('NA','','#NA'), stringsAsFactors = FALSE))
# Read the data
initialData <- as_tibble(read.csv('../data/shot_logs.csv', header = TRUE, na.strings = c('NA','','#NA'), stringsAsFactors = FALSE))
cleanData <- initialData
gameClock <- as.vector(second(fast_strptime(initialData$GAME_CLOCK, "%M:%S")))
shotClock <- is.na(initialData$SHOT_CLOCK)
for(i in 1:length(gameClock)){
if(shotClock[i] & gameClock[i] < 25){
cleanData$SHOT_CLOCK[i] <- gameClock[i]
}
}
weirdShotClock <- subset(cleanData, is.na(SHOT_CLOCK))
cleanData$GAME_CLOCK <- as.vector(strptime(initialData$GAME_CLOCK, "%M:%S"))
ggplot(initialData, mapping = aes(GAME_CLOCK, stat(count))) + geom_bar()
ggplot(initialData, mapping = aes(GAME_CLOCK, stat(count))) + geom_histogram()
View(weird)
View(cleanData)
cleanData <- subset(cleanData, -is.na(SHOT_CLOCK))
cleanData <- subset(cleanData, !is.na(SHOT_CLOCK))
128069-1205
write.csv(cleanData, "../data/shot_logs_clean_noNA.csv")
cleanData <- initialData
gameClock <- as.vector(second(fast_strptime(initialData$GAME_CLOCK, "%M:%S")))
shotClock <- is.na(initialData$SHOT_CLOCK)
for(i in 1:length(gameClock)){
if(shotClock[i] & gameClock[i] < 25){
cleanData$SHOT_CLOCK[i] <- gameClock[i]
}
}
weirdShotClock <- subset(cleanData, is.na(SHOT_CLOCK))
cleanNoNAData <- subset(cleanData, !is.na(SHOT_CLOCK))
ggplot(initialData, mapping = aes(SHOT_CLOCK, stat(count))) + geom_bar()
ggplot(initialData, mapping = aes(SHOT_CLOCK, stat(count))) + geom_histogram()
ggplot(initialData, mapping = aes(GAME_CLOCK, stat(count))) + geom_bar()
ggplot(initialData, mapping = aes(GAME_CLOCK, stat(count))) + geom_histogram()
