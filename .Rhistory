ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.8,minlen = 3, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
eclat_start <- Sys.time()
eclat.itemset <- eclat(trans, parameter = list(supp=0.01,maxlen=5))
eclat.rules <- ruleInduction(eclat.itemset, trans, confidence = 0.75)
eclat_end <- Sys.time()
eclat_time <- as.numeric(eclat_end - eclat_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
eclat_start <- Sys.time()
eclat.itemset <- eclat(trans, parameter = list(supp=0.01,maxlen=5))
eclat.rules <- ruleInduction(eclat.itemset, trans, confidence = 0.8)
eclat_end <- Sys.time()
eclat_time <- as.numeric(eclat_end - eclat_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.02, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
eclat_start <- Sys.time()
eclat.itemset <- eclat(trans, parameter = list(supp=0.02,maxlen=5))
eclat.rules <- ruleInduction(eclat.itemset, trans, confidence = 0.8)
eclat_end <- Sys.time()
eclat_time <- as.numeric(eclat_end - eclat_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.04, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
eclat_start <- Sys.time()
eclat.itemset <- eclat(trans, parameter = list(supp=0.04,maxlen=5))
eclat.rules <- ruleInduction(eclat.itemset, trans, confidence = 0.8)
eclat_end <- Sys.time()
eclat_time <- as.numeric(eclat_end - eclat_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
eclat_start <- Sys.time()
eclat.itemset <- eclat(trans, parameter = list(supp=0.01,maxlen=5))
eclat.rules <- ruleInduction(eclat.itemset, trans, confidence = 0.8)
eclat_end <- Sys.time()
eclat_time <- as.numeric(eclat_end - eclat_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
eclat_start <- Sys.time()
eclat.itemset <- eclat(trans, parameter = list(supp=0.01,maxlen=5))
eclat.rules <- ruleInduction(eclat.itemset, trans, confidence = 0.8)
eclat_end <- Sys.time()
eclat_time <- as.numeric(eclat_end - eclat_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.02, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
eclat_start <- Sys.time()
eclat.itemset <- eclat(trans, parameter = list(supp=0.02,maxlen=5))
eclat.rules <- ruleInduction(eclat.itemset, trans, confidence = 0.8)
eclat_end <- Sys.time()
eclat_time <- as.numeric(eclat_end - eclat_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.03, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
eclat_start <- Sys.time()
eclat.itemset <- eclat(trans, parameter = list(supp=0.03,maxlen=5))
eclat.rules <- ruleInduction(eclat.itemset, trans, confidence = 0.8)
eclat_end <- Sys.time()
eclat_time <- as.numeric(eclat_end - eclat_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.03, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.03, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.03, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.03, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
eclat_start <- Sys.time()
eclat.itemset <- eclat(trans, parameter = list(supp=0.03,maxlen=5))
eclat.rules <- ruleInduction(eclat.itemset, trans, confidence = 0.8)
eclat_end <- Sys.time()
eclat_time <- as.numeric(eclat_end - eclat_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.03, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.04, conf=0.8, maxlen=5))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
eclat_start <- Sys.time()
eclat.itemset <- eclat(trans, parameter = list(supp=0.04,maxlen=5))
eclat.rules <- ruleInduction(eclat.itemset, trans, confidence = 0.8)
eclat_end <- Sys.time()
eclat_time <- as.numeric(eclat_end - eclat_start)
#libraries
library(arules)
library(rJava)
library(rCBA)
library(arulesViz)
# Reading the data file
mydata<-read.csv("../data/online_retail_II_combined.csv")
mydata <- mydata[,-1]
mydata <- mydata[-grep("C", mydata$InvoiceNo),]
mydata <- mydata[-grep("A", mydata$InvoiceNo),]
mydata <- mydata[!(mydata$Description == ""),]
mydata <- mydata[!(mydata$Description == "DOTCOM POSTAGE"),]
#remove 1st column (counting # of items in basket)
#mydata <- mydata[,-1]
#write updated CSV with cleaned InvoiceNo column
mydata <- write.csv(mydata, "../data/OnlineRetail_II_combined.csv")
#read updated CSV into transactions object
#trans <- read.transactions("../data/groceriesClean.csv", format="single", sep=",", cols=1)
colvec <- c("InvoiceNo","Description")
# read transactions from csv
trans <- read.transactions(
file = "../data/OnlineRetail_II_combined.csv",
format = "single",
header = TRUE,
sep = ",",
cols=colvec,
rm.duplicates = T
)
itemFrequencyPlot(trans,topN=20,type="absolute",main="Item Frequency Plot")
#apriori algorithm
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.005, conf=0.5,maxlen=20))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
head(apriori.rules_df)
inspect(apriori.rules)
#FP growth
#fp.rules <- rCBA::fpgrowth(trans, support = 0.01, confidence = 0.7, maxLength = 5, consequent = "Description")
#inspect(fp.rules)
#ECLAT algorithm
eclat_start <- Sys.time()
eclat.itemset <- eclat(trans, parameter = list(supp=0.005,maxlen=20))
eclat.rules <- ruleInduction(eclat.itemset, trans, confidence = 0.5)
eclat_end <- Sys.time()
eclat_time <- as.numeric(eclat_end - eclat_start)
eclat.rules_df<- data.frame(lhs = labels(lhs(eclat.rules)), rhs = labels(rhs(eclat.rules)), eclat.rules@quality)
head(eclat.rules_df)
plot(apriori.rules, method = "scatterplot")
#plot rules
#plot(apriori.rules, measure = c("support", "lift"), shading = "confidence", interactive = TRUE)
plot(apriori.rules, method = "scatterplot", main = "Apriori Rules")
plot(eclat.rules, method = "graph")
setwd("C:/Git/CSML1000-Group_10-Assignment_2/source/markdown")
#libraries
library(arules)
library(rJava)
library(rCBA)
library(arulesViz)
# Reading the data file
mydata<-read.csv("../data/online_retail_II_combined.csv")
mydata <- mydata[,-1]
mydata <- mydata[-grep("C", mydata$InvoiceNo),]
mydata <- mydata[-grep("A", mydata$InvoiceNo),]
mydata <- mydata[!(mydata$Description == ""),]
mydata <- mydata[!(mydata$Description == "DOTCOM POSTAGE"),]
#remove 1st column (counting # of items in basket)
#mydata <- mydata[,-1]
#write updated CSV with cleaned InvoiceNo column
mydata <- write.csv(mydata, "../data/OnlineRetail_II_combined.csv")
#read updated CSV into transactions object
#trans <- read.transactions("../data/groceriesClean.csv", format="single", sep=",", cols=1)
colvec <- c("InvoiceNo","Description")
# read transactions from csv
trans <- read.transactions(
file = "../data/OnlineRetail_II_combined.csv",
format = "single",
header = TRUE,
sep = ",",
cols=colvec,
rm.duplicates = T
)
itemFrequencyPlot(trans,topN=20,type="absolute",main="Item Frequency Plot")
#apriori algorithm
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.005, conf=0.5,maxlen=20))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
head(apriori.rules_df)
inspect(apriori.rules)
#FP growth
#fp.rules <- rCBA::fpgrowth(trans, support = 0.01, confidence = 0.7, maxLength = 5, consequent = "Description")
#inspect(fp.rules)
#ECLAT algorithm
eclat_start <- Sys.time()
eclat.itemset <- eclat(trans, parameter = list(supp=0.005,maxlen=20))
eclat.rules <- ruleInduction(eclat.itemset, trans, confidence = 0.5)
eclat_end <- Sys.time()
eclat_time <- as.numeric(eclat_end - eclat_start)
eclat.rules_df<- data.frame(lhs = labels(lhs(eclat.rules)), rhs = labels(rhs(eclat.rules)), eclat.rules@quality)
head(eclat.rules_df)
plot(apriori.rules, method = "scatterplot")
#plot rules
#plot(apriori.rules, measure = c("support", "lift"), shading = "confidence", interactive = TRUE)
plot(apriori.rules, method = "scatterplot", main = "Apriori Rules")
plot(eclat.rules, method = "graph")
#libraries
library(arules)
library(rJava)
library(rCBA)
library(arulesViz)
# Reading the data file
mydata<-read.csv("../data/online_retail_II_combined.csv")
mydata <- mydata[,-1]
mydata <- mydata[-grep("C", mydata$InvoiceNo),]
mydata <- mydata[-grep("A", mydata$InvoiceNo),]
mydata <- mydata[!(mydata$Description == ""),]
mydata <- mydata[!(mydata$Description == "DOTCOM POSTAGE"),]
#remove 1st column (counting # of items in basket)
#mydata <- mydata[,-1]
#write updated CSV with cleaned InvoiceNo column
mydata <- write.csv(mydata, "../data/OnlineRetail_II_combined.csv")
#read updated CSV into transactions object
#trans <- read.transactions("../data/groceriesClean.csv", format="single", sep=",", cols=1)
colvec <- c("InvoiceNo","Description")
# read transactions from csv
trans <- read.transactions(
file = "../data/OnlineRetail_II_combined.csv",
format = "single",
header = TRUE,
sep = ",",
cols=colvec,
rm.duplicates = T
)
itemFrequencyPlot(trans,topN=20,type="absolute",main="Item Frequency Plot")
#apriori algorithm
ap_start <- Sys.time()
apriori.rules <- apriori(trans, parameter = list(supp=0.005, conf=0.5,maxlen=20))
apriori.rules_df<- data.frame(lhs = labels(lhs(apriori.rules)), rhs = labels(rhs(apriori.rules)), apriori.rules@quality)
ap_end <- Sys.time()
ap_time <- as.numeric(ap_end - ap_start)
head(apriori.rules_df)
inspect(apriori.rules)
#FP growth
#fp.rules <- rCBA::fpgrowth(trans, support = 0.01, confidence = 0.7, maxLength = 5, consequent = "Description")
#inspect(fp.rules)
#ECLAT algorithm
eclat_start <- Sys.time()
eclat.itemset <- eclat(trans, parameter = list(supp=0.005,maxlen=20))
eclat.rules <- ruleInduction(eclat.itemset, trans, confidence = 0.5)
eclat_end <- Sys.time()
eclat_time <- as.numeric(eclat_end - eclat_start)
eclat.rules_df<- data.frame(lhs = labels(lhs(eclat.rules)), rhs = labels(rhs(eclat.rules)), eclat.rules@quality)
head(eclat.rules_df)
plot(apriori.rules, method = "scatterplot")
#plot rules
#plot(apriori.rules, measure = c("support", "lift"), shading = "confidence", interactive = TRUE)
plot(apriori.rules, method = "scatterplot", main = "Apriori Rules")
plot(eclat.rules, method = "graph")
shiny::runApp('C:/Users/viswe/Desktop/Certificate in Machine Learning/ASSIGNMENTS/CSML1000-Group-10-assignment-1')
install.packages("shinyWidgets")
runApp('C:/Users/viswe/Desktop/Certificate in Machine Learning/ASSIGNMENTS/CSML1000-Group_10-Assignment_2/shiny')
install.packages(c("fpc", "mclust"))
# Load libraries
library(tidyverse)
library(mclust)
library(chron)
library(lubridate)
# Read the data
initialData <- as_tibble(read.csv('../data/shot_logs.csv', header = TRUE, na.strings = c('NA','','#NA'), stringsAsFactors = FALSE))
# Explore the data a bit
summary(initialData)
# Read the data
initialData <- as_tibble(read.csv('../data/shot_logs.csv', header = TRUE, na.strings = c('NA','','#NA'), stringsAsFactors = FALSE))
setwd("C:/Users/viswe/Desktop/Certificate in Machine Learning/ASSIGNMENTS/Assignment 1/CSML1000-Group_10-Final-Project")
# Read the data
initialData <- as_tibble(read.csv('../data/shot_logs.csv', header = TRUE, na.strings = c('NA','','#NA'), stringsAsFactors = FALSE))
setwd("C:/Users/viswe/Desktop/Certificate in Machine Learning/ASSIGNMENTS/Assignment 1/CSML1000-Group_10-Final-Project/data")
# Read the data
initialData <- as_tibble(read.csv('../data/shot_logs.csv', header = TRUE, na.strings = c('NA','','#NA'), stringsAsFactors = FALSE))
View(initialData)
# Explore the data a bit
summary(initialData)
head(initialData)
head(initialData)
setwd("C:/Users/viswe/Desktop/Certificate in Machine Learning/ASSIGNMENTS/Assignment 1/CSML1000-Group_10-Final-Project")
knitr::opts_chunk$set(echo = TRUE)
#Loading Libraries
library(tidyverse)
library(mclust)
library(chron)
library(lubridate)
library(kableExtra)
library(xtable)
library(ggplot2)
library(RColorBrewer)
outlineColour = brewer.pal(9, "Set1") #colour palette for outlining graphs
fillColour = brewer.pal(9, "Pastel1") #colour palette for filling graphs
```{r pressure, echo=FALSE, eval = FALSE, fig.cap="A caption", out.width = '100%'}
```{r, echo=FALSE, eval = FALSE, fig.cap="A caption", out.width = '100%'}
knitr::include_graphics("closestDefDistHistogram.png")
```
! [Alt text] (./closestDefDistHistogram.jpg)
We attempt to further understand the data using the following plots
![Alt text] (./closestDefDistHistogram.jpg)
!Alt text] (./closestDefDistHistogram.jpg)
![closest defender position](./closestDefDistHistogram.jpg)
![closest defender position](./closestDefDistHistogram.jpg)
```{r figurename, echo=FALSE, fig.cap="my caption", out.width = '90%'}
![alt text](../closestDefDistHistogram.png)
![alt text](./closestDefDistHistogram.png)
[![alt text]](./closestDefDistHistogram.png)
![Closest defender position]("./closestDefDistHistogram.png")
![Closest defender position](./closestDefDistHistogram.png)
![Closest defender position]("./CSML1000-Group_10-Final-Project/plots/closestDefDistHistogram.png")
setwd("C:/Users/viswe/Desktop/Certificate in Machine Learning/ASSIGNMENTS/Assignment 1/CSML1000-Group_10-Final-Project")
![Closest defender position]("./plots/closestDefDistHistogram.png")
```{r echo=FALSE, out.width='100%'}
setwd("C:/Users/viswe/Desktop/Certificate in Machine Learning/ASSIGNMENTS/Assignment 1/CSML1000-Group_10-Final-Project")
install.packages("gridExtra")
install.packages("cowplot")
install.packages("magick")
View(initialData)
knitr::opts_chunk$set(echo = TRUE)
#Loading Libraries
library(tidyverse)
library(mclust)
library(chron)
library(lubridate)
library(kableExtra)
library(xtable)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
library(cowplot)
library(magick)
outlineColour = brewer.pal(9, "Set1") #colour palette for outlining graphs
fillColour = brewer.pal(9, "Pastel1") #colour palette for filling graphs
p1 <- ggdraw() + draw_image("../plots/closestDefDistHistogram.png", scale = 1)
p2 <- ggdraw() + draw_image("../plots/dribblesHistogram.png", scale = 1)
p3 <- ggdraw() + draw_image("../plots/finalMarginHistogram.png", scale = 1)
p4 <- ggdraw() + draw_image("../plots/shotDistanceHistogram.png", scale = 1)
plot_grid(p1, p2, p3, p4, align = "h", nrow = 1)
p1 <- ggdraw() + draw_image("../plots/closestDefDistHistogram.png", scale = 1)
p2 <- ggdraw() + draw_image("../plots/dribblesHistogram.png", scale = 1)
p3 <- ggdraw() + draw_image("../plots/finalMarginHistogram.png", scale = 1)
p4 <- ggdraw() + draw_image("../plots/shotDistanceHistogram.png", scale = 1)
plot_grid(p1, p2, p3, p4, align = "v", nrow = 2, ncol = 2)
p1 <- ggdraw() + draw_image("../plots/closestDefDistHistogram.png", scale = 1)
p2 <- ggdraw() + draw_image("../plots/dribblesHistogram.png", scale = 1)
p3 <- ggdraw() + draw_image("../plots/finalMarginHistogram.png", scale = 1)
p4 <- ggdraw() + draw_image("../plots/shotDistanceHistogram.png", scale = 1)
plot(p1,p2,p3,p4)
p1 <- ggdraw() + draw_image("../plots/closestDefDistHistogram.png", scale = 1)
p2 <- ggdraw() + draw_image("../plots/dribblesHistogram.png", scale = 1)
p3 <- ggdraw() + draw_image("../plots/finalMarginHistogram.png", scale = 1)
p4 <- ggdraw() + draw_image("../plots/shotDistanceHistogram.png", scale = 1)
plot_grid(p1,p2,p3,p4)
p1 <- ggdraw() + draw_image("../plots/closestDefDistHistogram.png", scale = 1)
p2 <- ggdraw() + draw_image("../plots/dribblesHistogram.png", scale = 1)
p3 <- ggdraw() + draw_image("../plots/finalMarginHistogram.png", scale = 1)
p4 <- ggdraw() + draw_image("../plots/shotDistanceHistogram.png", scale = 1)
plot_grid(p1,p2,p3,p4)
# Load libraries
library(tidyverse)
library(mclust)
library(chron)
library(lubridate)
library(cluster)
library(fpc)
# Read the data
initialData <- as_tibble(read.csv('../data/shot_logs.CSV', header = TRUE, na.strings = c('NA','','#NA'), stringsAsFactors = FALSE))
setwd("C:/Users/viswe/Desktop/Certificate in Machine Learning/ASSIGNMENTS/Assignment 1/CSML1000-Group_10-Final-Project")
# Read the data
initialData <- as_tibble(read.csv('../data/shot_logs.CSV', header = TRUE, na.strings = c('NA','','#NA'), stringsAsFactors = FALSE))
# Read the data
initialData <- as_tibble(read.csv('./data/shot_logs.CSV', header = TRUE, na.strings = c('NA','','#NA'), stringsAsFactors = FALSE))
# Find NA shot clock data that was NA because the game clock was < 25 seconds left.
# Assumption is that shot clock is equal to game clock in this case. Possible that it just wasn't recorded.
cleanData <- initialData
gameClock <- as.vector(second(fast_strptime(cleanData$GAME_CLOCK, "%M:%S"))) +
as.vector(minute(fast_strptime(cleanData$GAME_CLOCK, "%M:%S"))) * 60
shotClock <- is.na(initialData$SHOT_CLOCK)
for(i in 1:length(gameClock)){
if(shotClock[i] & gameClock[i] < 25){
cleanData$SHOT_CLOCK[i] <- gameClock[i]
}
}
# Place NA leftovers in a new dataframe for examination/backup.
weirdShotClock <- subset(cleanData, is.na(SHOT_CLOCK))
# Remove all NA's from cleanData
cleanNoNAData <- subset(cleanData, !is.na(SHOT_CLOCK))
# Custom function to capitalize first letter of each word in a string.
# Currently not used.
capwords <- function(s, strict = FALSE) {
cap <- function(s) paste(toupper(substring(s, 1, 1)),
{s <- substring(s, 2); if(strict) tolower(s) else s},
sep = "", collapse = " " )
sapply(strsplit(s, split = " "), cap, USE.NAMES = !is.null(names(s)))
}
# Custom function for name format reverse from "firstname lastname" to "lastname, firstname"
nameformatreverse <- function(s) {
fname <- str_extract(s, "^\\w+")
lname <- str_extract(s, "\\w+$")
s <- paste(lname, fname, sep = ", ")
}
# Clean up shooter names to all capitals and "lastname, firstname" format both to ensure uniformity.
shooterName <- cleanNoNAData$player_name
shooterName <- toupper(shooterName)
shooterName <- nameformatreverse(shooterName)
# Clean up defender names to all capitals and no "." both to ensure uniformity.
cleanNoNAData$player_name <- shooterName
cleanNoNAData$CLOSEST_DEFENDER <- toupper(cleanNoNAData$CLOSEST_DEFENDER)
cleanNoNAData$CLOSEST_DEFENDER <- gsub("[.]", "", cleanNoNAData$CLOSEST_DEFENDER)
# Seconds for game clock
cleanNoNASecondsClockData <- cleanNoNAData
cleanNoNASecondsClockData$GAME_CLOCK <- as.vector(second(fast_strptime(cleanNoNAData$GAME_CLOCK, "%M:%S"))) +
as.vector(minute(fast_strptime(cleanNoNAData$GAME_CLOCK, "%M:%S"))) * 60
# Remove rows for which touch time doesn't make sense
cleanNoNASecondsClockData <- cleanNoNASecondsClockData[cleanNoNASecondsClockData$TOUCH_TIME > 0, ]
# Plot things.
ggplot(cleanNoNASecondsClockData, aes(SHOT_DIST)) + geom_bar() +
labs(title = "Shot Distance Histogram") + xlab("Shot Distance (ft)") + ylab("Total # of shots")
# Get the scaled numeric-only data for use for clustering.
kdataunscaled <- cleanNoNASecondsClockData[, c("SHOT_NUMBER", "PERIOD",
"GAME_CLOCK", "SHOT_CLOCK", "DRIBBLES",
"TOUCH_TIME", "SHOT_DIST", "CLOSE_DEF_DIST")]
kdata <- scale(kdataunscaled)
# Remove unneeded data for RAM
rm(gameClock)
rm(shooterName)
rm(cleanData)
rm(cleanNoNAData)
rm(initialData)
rm(weirdShotClock)
# Elbow Method for finding the optimal number of clusters
set.seed(123)
# Compute and plot wss for k = 1 to k = 15.
k.max <- 10
wss <- sapply(1:k.max, function(k){kmeans(kdata, k, nstart=50,iter.max = 15 )$tot.withinss})
wss
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
p5 <- ggdraw() + draw_image("../plots/ElbowMethodCluster.png")
plot(p5)
p5 <- ggdraw() + draw_image("../plots/ElbowMethodCluster.png")
plot_grid(p5)
p5 <- ggdraw() + draw_image("../plots/ElbowMethodCluster.png")
plot_grid(p5)
